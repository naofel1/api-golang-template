// Code generated by ent, DO NOT EDIT.

package student

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/naofel1/api-golang-template/internal/ent/predicate"
	"github.com/naofel1/api-golang-template/internal/primitive"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldUpdatedAt, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldLastName, v))
}

// Pseudo applies equality check predicate on the "pseudo" field. It's identical to PseudoEQ.
func Pseudo(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldPseudo, v))
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldBirthday, v))
}

// PasswordHash applies equality check predicate on the "password_hash" field. It's identical to PasswordHashEQ.
func PasswordHash(v []byte) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldPasswordHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldUpdatedAt, v))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldLastName, v))
}

// PseudoEQ applies the EQ predicate on the "pseudo" field.
func PseudoEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldPseudo, v))
}

// PseudoNEQ applies the NEQ predicate on the "pseudo" field.
func PseudoNEQ(v string) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldPseudo, v))
}

// PseudoIn applies the In predicate on the "pseudo" field.
func PseudoIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldPseudo, vs...))
}

// PseudoNotIn applies the NotIn predicate on the "pseudo" field.
func PseudoNotIn(vs ...string) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldPseudo, vs...))
}

// PseudoGT applies the GT predicate on the "pseudo" field.
func PseudoGT(v string) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldPseudo, v))
}

// PseudoGTE applies the GTE predicate on the "pseudo" field.
func PseudoGTE(v string) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldPseudo, v))
}

// PseudoLT applies the LT predicate on the "pseudo" field.
func PseudoLT(v string) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldPseudo, v))
}

// PseudoLTE applies the LTE predicate on the "pseudo" field.
func PseudoLTE(v string) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldPseudo, v))
}

// PseudoContains applies the Contains predicate on the "pseudo" field.
func PseudoContains(v string) predicate.Student {
	return predicate.Student(sql.FieldContains(FieldPseudo, v))
}

// PseudoHasPrefix applies the HasPrefix predicate on the "pseudo" field.
func PseudoHasPrefix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasPrefix(FieldPseudo, v))
}

// PseudoHasSuffix applies the HasSuffix predicate on the "pseudo" field.
func PseudoHasSuffix(v string) predicate.Student {
	return predicate.Student(sql.FieldHasSuffix(FieldPseudo, v))
}

// PseudoEqualFold applies the EqualFold predicate on the "pseudo" field.
func PseudoEqualFold(v string) predicate.Student {
	return predicate.Student(sql.FieldEqualFold(FieldPseudo, v))
}

// PseudoContainsFold applies the ContainsFold predicate on the "pseudo" field.
func PseudoContainsFold(v string) predicate.Student {
	return predicate.Student(sql.FieldContainsFold(FieldPseudo, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v primitive.Gender) predicate.Student {
	vc := v
	return predicate.Student(sql.FieldEQ(FieldGender, vc))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v primitive.Gender) predicate.Student {
	vc := v
	return predicate.Student(sql.FieldNEQ(FieldGender, vc))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...primitive.Gender) predicate.Student {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(sql.FieldIn(FieldGender, v...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...primitive.Gender) predicate.Student {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Student(sql.FieldNotIn(FieldGender, v...))
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldBirthday, v))
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldBirthday, v))
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldBirthday, vs...))
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldBirthday, vs...))
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldBirthday, v))
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldBirthday, v))
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldBirthday, v))
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldBirthday, v))
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.Student {
	return predicate.Student(sql.FieldIsNull(FieldBirthday))
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.Student {
	return predicate.Student(sql.FieldNotNull(FieldBirthday))
}

// PasswordHashEQ applies the EQ predicate on the "password_hash" field.
func PasswordHashEQ(v []byte) predicate.Student {
	return predicate.Student(sql.FieldEQ(FieldPasswordHash, v))
}

// PasswordHashNEQ applies the NEQ predicate on the "password_hash" field.
func PasswordHashNEQ(v []byte) predicate.Student {
	return predicate.Student(sql.FieldNEQ(FieldPasswordHash, v))
}

// PasswordHashIn applies the In predicate on the "password_hash" field.
func PasswordHashIn(vs ...[]byte) predicate.Student {
	return predicate.Student(sql.FieldIn(FieldPasswordHash, vs...))
}

// PasswordHashNotIn applies the NotIn predicate on the "password_hash" field.
func PasswordHashNotIn(vs ...[]byte) predicate.Student {
	return predicate.Student(sql.FieldNotIn(FieldPasswordHash, vs...))
}

// PasswordHashGT applies the GT predicate on the "password_hash" field.
func PasswordHashGT(v []byte) predicate.Student {
	return predicate.Student(sql.FieldGT(FieldPasswordHash, v))
}

// PasswordHashGTE applies the GTE predicate on the "password_hash" field.
func PasswordHashGTE(v []byte) predicate.Student {
	return predicate.Student(sql.FieldGTE(FieldPasswordHash, v))
}

// PasswordHashLT applies the LT predicate on the "password_hash" field.
func PasswordHashLT(v []byte) predicate.Student {
	return predicate.Student(sql.FieldLT(FieldPasswordHash, v))
}

// PasswordHashLTE applies the LTE predicate on the "password_hash" field.
func PasswordHashLTE(v []byte) predicate.Student {
	return predicate.Student(sql.FieldLTE(FieldPasswordHash, v))
}

// PasswordHashIsNil applies the IsNil predicate on the "password_hash" field.
func PasswordHashIsNil() predicate.Student {
	return predicate.Student(sql.FieldIsNull(FieldPasswordHash))
}

// PasswordHashNotNil applies the NotNil predicate on the "password_hash" field.
func PasswordHashNotNil() predicate.Student {
	return predicate.Student(sql.FieldNotNull(FieldPasswordHash))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Student) predicate.Student {
	return predicate.Student(func(s *sql.Selector) {
		p(s.Not())
	})
}
