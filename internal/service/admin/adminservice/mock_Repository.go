// Code generated by mockery v2.15.0. DO NOT EDIT.

package adminservice

import (
	context "context"

	ent "github.com/naofel1/api-golang-template/internal/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateAdmin provides a mock function with given fields: ctx, u
func (_m *MockRepository) CreateAdmin(ctx context.Context, u *ent.Admin) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Admin) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAdminByID provides a mock function with given fields: ctx, uid
func (_m *MockRepository) FindAdminByID(ctx context.Context, uid uuid.UUID) (*ent.Admin, error) {
	ret := _m.Called(ctx, uid)

	var r0 *ent.Admin
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ent.Admin); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAdminByLogin provides a mock function with given fields: ctx, login
func (_m *MockRepository) FindAdminByLogin(ctx context.Context, login string) (*ent.Admin, error) {
	ret := _m.Called(ctx, login)

	var r0 *ent.Admin
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.Admin); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Admin)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdmin provides a mock function with given fields: ctx, u
func (_m *MockRepository) UpdateAdmin(ctx context.Context, u *ent.Admin) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Admin) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
