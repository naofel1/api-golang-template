// Code generated by mockery v2.15.0. DO NOT EDIT.

package bucketservice

import (
	context "context"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// UploadHealthCheckResult provides a mock function with given fields: ctx, bucketName, objName, imageFileHeader
func (_m *MockInterface) UploadHealthCheckResult(ctx context.Context, bucketName string, objName string, imageFileHeader *multipart.FileHeader) (string, error) {
	ret := _m.Called(ctx, bucketName, objName, imageFileHeader)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *multipart.FileHeader) string); ok {
		r0 = rf(ctx, bucketName, objName, imageFileHeader)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, bucketName, objName, imageFileHeader)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterface(t mockConstructorTestingTNewMockInterface) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
