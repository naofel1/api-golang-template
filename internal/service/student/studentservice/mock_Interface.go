// Code generated by mockery v2.15.0. DO NOT EDIT.

package studentservice

import (
	context "context"

	ent "github.com/naofel1/api-golang-template/internal/ent"
	mock "github.com/stretchr/testify/mock"

	pagination "github.com/naofel1/api-golang-template/pkg/pagination"
)

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// DeleteStudent provides a mock function with given fields: ctx, u
func (_m *MockInterface) DeleteStudent(ctx context.Context, u *ent.Student) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Student) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudent provides a mock function with given fields: ctx, u
func (_m *MockInterface) GetStudent(ctx context.Context, u *ent.Student) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Student) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentFromLogin provides a mock function with given fields: ctx, u
func (_m *MockInterface) GetStudentFromLogin(ctx context.Context, u *ent.Student) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Student) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentsWithPagination provides a mock function with given fields: ctx, u, _a2
func (_m *MockInterface) GetStudentsWithPagination(ctx context.Context, u *ent.Students, _a2 *pagination.Front) error {
	ret := _m.Called(ctx, u, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Students, *pagination.Front) error); ok {
		r0 = rf(ctx, u, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentsWithSearchWithPagination provides a mock function with given fields: ctx, u, us, _a3
func (_m *MockInterface) GetStudentsWithSearchWithPagination(ctx context.Context, u *ent.Students, us *ent.Student, _a3 *pagination.Front) error {
	ret := _m.Called(ctx, u, us, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Students, *ent.Student, *pagination.Front) error); ok {
		r0 = rf(ctx, u, us, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModifyProfile provides a mock function with given fields: ctx, u
func (_m *MockInterface) ModifyProfile(ctx context.Context, u *ent.Student) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Student) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signin provides a mock function with given fields: ctx, u
func (_m *MockInterface) Signin(ctx context.Context, u *ent.Student) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Student) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Signup provides a mock function with given fields: ctx, u
func (_m *MockInterface) Signup(ctx context.Context, u *ent.Student) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ent.Student) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInterface creates a new instance of MockInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInterface(t mockConstructorTestingTNewMockInterface) *MockInterface {
	mock := &MockInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
