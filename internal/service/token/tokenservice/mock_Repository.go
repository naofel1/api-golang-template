// Code generated by mockery v2.15.0. DO NOT EDIT.

package tokenservice

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// DeleteRefreshToken provides a mock function with given fields: ctx, userID, prevTokenID
func (_m *MockRepository) DeleteRefreshToken(ctx context.Context, userID string, prevTokenID string) error {
	ret := _m.Called(ctx, userID, prevTokenID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, prevTokenID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserRefreshTokens provides a mock function with given fields: ctx, userID
func (_m *MockRepository) DeleteUserRefreshTokens(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetRefreshToken provides a mock function with given fields: ctx, userID, tokenID, expiresIn
func (_m *MockRepository) SetRefreshToken(ctx context.Context, userID string, tokenID string, expiresIn time.Duration) error {
	ret := _m.Called(ctx, userID, tokenID, expiresIn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, userID, tokenID, expiresIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
